pub fn train(map: mapping::map<String, String>) {
    // Deconstructing map into his two arrays

    let dec = map.deconstruct();
    let keys = dec.keys;
    let ckeys = keys.clone();
    let values = dec.values;

    // Now, let's create a mega array.

    let mut frequency: mapping::Deconstructed<String, usize> = mapping::Deconstructed {
        keys: Vec::new(),
        values: Vec::new(),
        size: 0
    };

    for key in keys {
        for word in key.split_whitespace() {
            let container = contains(&ckeys, word.to_string());
            
            if container.0 && container.1 < frequency.keys.len() {
                frequency.values[container.1] += 1;
            }

            else {
                frequency.keys.push(word.to_string());
                frequency.values.push(1);
            };

        };
    };

    println!("{:?}", frequency.keys);
    println!("{:?}", frequency.values);
}