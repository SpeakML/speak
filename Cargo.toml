[package]
name = "speak"
version = "0.1.0"
edition = "2021"
readme = "README.md"
repository = "https://github.com/blyxyas/speak/"
keywords = [
	"speak",
	"machine-learning",
	"nlp",
	"natural-language-processing",
	"conversation",
	"minimal",
	"fast",
]
license = "GNU General Public License v2.0"
description = "A minimal, fast, machine-learning based chatbot"
publish = false

[dependencies]
aquamarine = { version = "0.1.1", optional = true }
rand = { version = "0.8.5", optional = true}
document-features = "0.2.1"

# Now, we add the lib section just for the testing


[build]
RUSTDOCFLAGS = ["--html-in-header", "katex-header.html"]

# Dev dependencies
[dev-dependencies]
colored = "2.0.0"

[lib]
name = "speak"
bench = true
doc = true
edition = "2021"
crate-type = ["lib"]

[features]
# debug is required (being that Speak is in development)
default = ["debug", "fancy_docs", "randomness"]

## <h1>Fancy Docs</h1>
## Fancy docs is the feature that adds some fancy documentation to the Speak crate.
## It is not required, but it is recommended. It adds things like **graphs** or **Latex equations** to the more complex documentation.
fancy_docs = ["dep:aquamarine"]

## <h1>Randomness</h1>
## Randomness is an optional (but highly recommended) feature that will pass some randomness to the algorithm.
## 
## ### What does this mean?
## There's two ways the algorithm works, the first way is **analyzing every single entry**, this method is slow, and doesn't have the ability to *encourage* or *disencourage* some entry.
## 
## The second method is **analyzing every single entry until a break point, then aplying a distribution**, this method is more fast, when the break point is reached, the algorithm will start to ignore some cases. The distribution used is very simple just:
## <h3 align="center"><img src="https://render.githubusercontent.com/render/math?math=\bbox[%230d1117]{\color{%23fff}{%5Cbigg%5C%7B%5Cbegin%7Barray%7D%7Bll%7D%09i%20%5Cleq%20%5Ctext%7Brange%7D%20%26%20%5Cdotsc%09%5C%5C%09i%20%3E%20%5Ctext%7Brange%7D%20%26%20R%5Cin%5C%7B0%2C...%2C%5C%23V%5C%7D%5C%20%5Cbigg%5C%7B%5Cbegin%7Barray%7D%7Bll%7D%09%09R%20%3C%20i%20%26%20%5Cdotsc%09%09%5C%5C%09%09R%20%5Cgeq%20i%20%26%20%5Ctext%7Bpass%7D%09%5Cend%7Barray%7D%5Cend%7Barray%7D}}" /></h3>
## 
## The distribution is very simple, and just random enough to serve our purpose.
## ### Why use a distribution?
## Activating the randomness will change the way that the `run` algorithm works, adding a new system, the *ranking system*. The ranking system will take into account just the first `RANGE` entries, and then will use the distribution, so the last entry is very unlikely to be analyzed, but the first one after the range is almost guaranteed to be analyzed. We use this because now we can *rank* the entries, encouraging or disencouraging them by changing the index.
randomness = ["dep:rand"]
debug = []
